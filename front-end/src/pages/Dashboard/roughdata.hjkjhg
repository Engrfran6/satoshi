import {createContext, useState} from 'react';
import {useFetch} from './useFetch';

export const DataContext = createContext();

export const DataProviderwww = ({children}) => {
  const userId = 4;
  const url = `http://localhost:5000/data/${userId}`;
  const {data, loading, error, logout} = useFetch(url);

  const sumArray = (arrayOfData, index) => {
    let sumOfArrayOfAmount = 0; // the sum is initialed to 0
    for (let i = 0; i < arrayOfData.length; i += 1) {
      sumOfArrayOfAmount += arrayOfData[i][index];
    }
    return sumOfArrayOfAmount;
  };

  const sumArray2 = (arrayOfData2) => {
    let sumOfArrayOfAmount2 = 0; // the sum is initialed to 0
    for (let i = 0; i < arrayOfData2.length; i += 1) {
      sumOfArrayOfAmount2 += arrayOfData2[i];
    }
    return sumOfArrayOfAmount2;
  };

  const balance = data.balance.toLocaleString(undefined, {maximumFractionDigits: 2});
  const totalInvested = (
    sumArray(data.activeInvestments, 'amountInvested') +
    sumArray(data.expiredInvestments, 'amountInvested')
  ).toLocaleString(undefined, {maximumFractionDigits: 2});
  const totalBalance = (
    data.balance + sumArray(data.activeInvestments, 'amountInvested')
  ).toLocaleString(undefined, {maximumFractionDigits: 2});
  const totalProfits = (
    sumArray(data.activeInvestments, 'dailyReturns') +
    (data.rewards + data.referrals) +
    sumArray(data.expiredInvestments, 'dailyReturns')
  ).toLocaleString(undefined, {maximumFractionDigits: 2});
  const currentInventedFunds = sumArray(data.activeInvestments, 'amountInvested').toLocaleString(
    undefined,
    {maximumFractionDigits: 2}
  );

  const thisMonthProfit = sumArray(data.activeInvestments, 'dailyReturns').toLocaleString(
    undefined,
    {maximumFractionDigits: 2}
  );
  const rewards = data.rewards.toLocaleString(undefined, {maximumFractionDigits: 2});
  const referrals = data.referrals.toLocaleString(undefined, {maximumFractionDigits: 2});
  const totalMonthlyProfits = (
    sumArray(data.activeInvestments, 'dailyReturns') +
    data.rewards +
    data.referrals
  ).toLocaleString(undefined, {maximumFractionDigits: 2});

  const totalNumberOfInvestments = data.activeInvestments.length + data.expiredInvestments.length;

  const dailyReturns = sumArray(data.activeInvestments, 'dailyReturns').toLocaleString(undefined, {
    maximumFractionDigits: 2,
  });

  const lastestInvestments = data.activeInvestments.slice(-1);

  const numberOfActiveInvestments =
    data.activeInvestments.length > 0 ? data.activeInvestments.length : '0';
  const numberOfexpiredInvestments =
    data.expiredInvestments.length > 0 ? data.expiredInvestments.length : '0';

  const activeInvestments = data.activeInvestments;
  const expiredInvestments = data.expiredInvestments;

  const myInvestments = [];
  myInvestments.push(...activeInvestments, ...expiredInvestments);

  const customerName = data.user.name;
  const customerEmail = data.user.email;
  const customerStatus = data.user.isVerified;
  const referralsId = data.referralId;
  const inviteLink = `https://satochitradepro.com/?ref=${referralsId}`;

  const percentIncrease = (
    sumArray(data.activeInvestments, 'amountInvested') /
    sumArray(data.activeInvestments, 'profitRate') /
    1000
  ).toLocaleString(undefined, {maximumFractionDigits: 2});
  const percentDecrease = (
    sumArray(data.activeInvestments, 'amountInvested') /
    sumArray(data.activeInvestments, 'lossRate') /
    1000
  ).toLocaleString(undefined, {maximumFractionDigits: 2});

  const packageDetails = data.packageDetails;

  const calculateEndDate = (startDate, investmentPeriod) => {
    if (startDate && investmentPeriod) {
      const start = new Date(startDate);
      const periodInDays = parseInt(investmentPeriod, 10);

      // Calculate the end date by adding the investment period to the start date
      const endDateInMilliseconds = start.getTime() + periodInDays * 24 * 60 * 60 * 1000;
      const endDateObj = new Date(endDateInMilliseconds);
      const endDate = endDateObj.toISOString().split('T')[0]; // Convert to YYYY-MM-DD format

      return endDate;
    }
  };

  return (
    <DataContext.Provider
      value={{
        customerName,
        customerEmail,
        customerStatus,
        balance,
        rewards,
        referrals,
        inviteLink,
        totalInvested,
        totalBalance,
        totalProfits,
        dailyReturns,
        thisMonthProfit,
        totalMonthlyProfits,
        totalNumberOfInvestments,
        lastestInvestments,
        numberOfActiveInvestments,
        numberOfexpiredInvestments,
        currentInventedFunds,
        myInvestments,
        activeInvestments,
        expiredInvestments,
        percentIncrease,
        percentDecrease,
        referralsId,
        calculateEndDate,
        packageDetails,

        error,
        loading,
        logout,
      }}>
      {children}
    </DataContext.Provider>
  );
};
